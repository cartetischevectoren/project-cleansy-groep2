#include "mbed.h"
#include "angledSonar.h"
#include <vector>

//inputs
Sonar Sonar_LinksVoor(D2, D3, -45, -12, 12, 0);
Sonar Sonar_Voor(D4, D5);
Sonar Sonar_RechtsVoor(D6, D7, 45, 12, 12, 0);
AnalogIn IR_LinksVoor(A0);
AnalogIn IR_Voor(A1);
AnalogIn IR_RechtsVoor(A2);
AnalogIn IR_RechtsAchter(A3);
AnalogIn IR_LinksAchter(A5);

//outputs
PwmOut enable(D10);
DigitalOut LV(D11);
DigitalOut LA(D12);
DigitalOut RV(D13);
DigitalOut RA(D14);

//vaste waardes
#define RPM 110
#define AANTAL_SONAR 3
#define AANTAL_IR 5
#define PWM_FREQ 1
#define PWM_DUTY 0.4f
#define WIELDIAMETER 95.0f
#define MIDDELPUNTSAFSTAND 17.5f
#define BANDMIDDENAFSTAND 131.0f
#define PI 3.

//globale variabelen
float draaiafstand = 0.015625f * PI * BANDMIDDENAFSTAND;
float afstandpm = RPM * PWM_DUTY * PI * WIELDIAMETER;
int msec_turn = draaiafstand / afstandpm * 60000;
float msec_turn_f = draaiafstand / afstandpm * 60000;
float LVMAX, LVMIN, RVMAX, RVMIN, VMAX, VMIN, LAMAX, LAMIN, RAMAX, RAMIN;
float stdLV, stdRV, stdV, stdLA, stdRA;

//timers
Timer intit;
Timer achter;

bool IR_test(float LVP, float LVM, float RVP, float RVM, float VP, float VM, float LAP, float LAM, float RAP, float RAM)
{
    float links = IR_LinksVoor.read();
    float voor = IR_Voor.read();
    float rechts = IR_RechtsVoor.read();
    float linksachter = IR_LinksAchter.read();
    float rechtsachter = IR_RechtsAchter.read();
    if(links < LVP && links > LVM && voor < VP && voor > VM && rechts < RVP && rechts > RVM && linksachter < LAP && linksachter > LAM && rechtsachter < RAP && rechtsachter > RAM){
        return false;
    }
    else{
        return true;
    }
}

bool IR_test2(float LVP, float LVM, float RVP, float RVM, float VP, float VM)
{
    float links = IR_LinksVoor.read();
    float voor = IR_Voor.read();
    float rechts = IR_RechtsVoor.read();
    if((links < LVP && links > LVM) && (voor < VP && voor > VM) && (rechts < RVP && rechts > RVM)){
        wait_ms(10);
        return true;
    }
    else{
        wait_ms(10);
        return false;
    }
}

bool IR_test3(float LVP, float LVM, float RVP, float RVM, float VP, float VM)
{
    float links = IR_LinksVoor.read();
    float voor = IR_Voor.read();
    float rechts = IR_RechtsVoor.read();
    LVP = LVP - stdLV;
    LVM = LVM + stdLV;
    RVP = RVP - stdRV;
    RVM = RVM + stdRV;
    VP = VP - stdV;
    VM = VM + stdV;
    if((links < LVP && links > LVM) && (voor < VP && voor > VM) && (rechts < RVP && rechts > RVM)){
        wait_ms(10);
        return true;
    }
    else{
        wait_ms(10);
        return false;
    }
}

float afstandLinks()
{
    float afstand;
    Point puntLV = Sonar_LinksVoor.getCoordinate(); //x en y van gedetecteerde object
    if(fabs(puntLV.getx()) > MIDDELPUNTSAFSTAND){
        //er is een afstand tussen de robot en het object
        afstand = fabs(puntLV.getx() + MIDDELPUNTSAFSTAND);
    }
    else{
        //er is geen afstand tussen de robot en het object
        afstand = 0 - (puntLV.getx() + MIDDELPUNTSAFSTAND);
    }
    return afstand;
}

float afstandRechts()
{
    float afstand;
    Point puntRV = Sonar_RechtsVoor.getCoordinate();
    afstand = puntRV.getx() - MIDDELPUNTSAFSTAND;
    return afstand;
}

float afstandVoor()
{
    float afstand = Sonar_Voor.getDistance();
    return afstand;
}

bool vrij()
{
    if(afstandLinks() <= 8 || afstandRechts() <= 8 || afstandVoor() <= 18){
        //indien objecten gedetecteerd is het niet meer vrij
        return false;
    }
    else{
        //vrij
        return true;
    }
}

void Rondje()
{
    intit.reset();
    intit.start();
    //timer om te bepalen of heel rondje gereden is
    LV = 1;
    RV = 0;
    LA = 0;
    RA = 1;
    //cw rondje rijden   
}

void Vooruit(float LVP, float LVM, float RVP, float RVM, float VP, float VM)
{
    bool vV = vrij();
    vV = IR_test2(LVP, LVM, RVP, RVM, VP, VM);
    while(vV == true){
        //zolang vrij is rijd hij vooruit
        vV = vrij();
        if(IR_test2(LVP, LVM, RVP, RVM, VP, VM) == false){
            break;
        }
        if(vV == true){
            RV = 1;
            LV = 1;
        }
    }
    RV = 0;
    LV = 0;
    //stop  
}

void Achteruit()
{
    achter.reset();
    achter.start();
    //timer voor achteruit
    while(achter.read_ms() < 800){
        //indien vrij is en niet langer dan een seconde achteruit rijd
        LA = 1;
        RA = 1;
    }
    //stop
    achter.stop();
    RA = 0;
    LA = 0;
}

void Linksaf(float sec)
{
    bool vL = !vrij();
    //zolang het niet vrij is om te rijden moet hij draaien
    RV = 1;
    LA = 1;
    while(vL == true){
        //draaien in stapjes
        wait_ms(sec);
        vL = !vrij();
    }
    //stop
    RV = 0;
    LA = 0;
}

void Rechtsaf(float sec)
{
    bool vR = !vrij();
    //zolang niet vrij is draaien
    RA = 1;
    LV = 1;
    while(vR == true){
        //draaien in stapjes
        wait_ms(sec);
        vR = !vrij();
    }
    //stop
    RA = 0;
    LV = 0;

}

int main()
{
    int initialize = 0; //initializatie nog niet geweest indien anders is hij al geweest
    enable.period_ms(PWM_FREQ);
    enable.write(PWM_DUTY);
    int turn = 0;   // 0 is rechts, 1 is links

    while(1){
        float SLinks = afstandLinks();
        float SRechts = afstandRechts();
        float SVoor = afstandVoor();
        //float SAchter = afstandAchter();

        if(initialize == 0){
            vector<float> waardeLV;
            vector<float> waardeV;
            vector<float> waardeRV;
            vector<float> waardeLA;
            vector<float> waardeRA;

            for(int i = 0; i < 1000; i++){
                waardeLV.push_back(IR_LinksVoor.read());
                waardeV.push_back(IR_Voor.read());
                waardeRV.push_back(IR_RechtsVoor.read());
                waardeLA.push_back(IR_LinksAchter.read());
                waardeRA.push_back(IR_RechtsAchter.read());
            }

            float sumLV, sumV, sumRV, sumLA, sumRA;

            for(int j = 0; j < 1000; j++){
                float IRLV = waardeLV[j];
                float IRV = waardeV[j];
                float IRRV = waardeRV[j];
                float IRLA = waardeLA[j];
                float IRRA = waardeRA[j];

                sumLV = sumLV + IRLV;
                sumV = sumV + IRV;
                sumRV = sumRV + IRRV;
                sumLA = sumLA + IRLA;
                sumRA = sumRA + IRRA;
            }

            float meanLV = sumLV / 1000;
            float meanV = sumV / 1000;
            float meanRV = sumRV / 1000;
            float meanLA = sumLA / 1000;
            float meanRA = sumRA / 1000;

            float sumLV2, sumV2, sumRV2, sumLA2, sumRA2;
            for(int k = 0; k < 1000; k++){
                float IRLV = waardeLV[k];
                float IRV = waardeV[k];
                float IRRV = waardeRV[k];
                float IRLA = waardeLA[k];
                float IRRA = waardeRA[k];

                sumLV2 = sumLV2 + pow((IRLV - meanLV), 2);
                sumV2 = sumV2 + pow((IRV - meanV), 2);
                sumRV2 = sumRV2 + pow((IRRV - meanRV), 2);
                sumLA2 = sumLA2 + pow((IRLA - meanLA), 2);
                sumRA2 = sumRA2 + pow((IRRA - meanRA), 2);

            }
            stdLV = sqrt(sumLV2 / 1000);
            stdV = sqrt(sumV2 / 1000);
            stdRV = sqrt(sumRV2 / 1000);
            stdLA = sqrt(sumLA2 / 1000);
            stdRA = sqrt(sumRA2 / 1000);

            LVMAX = meanLV + 2* stdLV;
            LVMIN = meanLV - 2*stdLV;
            VMAX = meanV +  2*stdV;
            VMIN = meanV - 2*stdV;
            LAMAX = meanLA + 2*stdLA;
            LAMIN = meanLA - 2*stdLA;
            RVMAX = meanRV + 2*stdRV;
            RVMIN = meanRV - 2*stdRV;
            RAMAX = meanRA +  2*stdRA;
            RAMIN = meanRA -  2*stdRA;

            //initialisatie
            Rondje(); //cw rondje rijden
            bool SL, SR, SV, IR, check; //sonar check
            check = true;
            IR = false;
            while(check){
                printf("\r\n fase 4");
                if(IR == false){
                    IR = IR_test(LVMAX, LVMIN, RVMAX, RVMIN, VMAX, VMIN, LAMAX, LAMIN, RAMAX, RAMIN);
                }
                //printf("%f %f %f \r\n", afstandLinks(), afstandRechts(), afstandVoor());
                if(afstandLinks() < (SLinks - 10) || afstandLinks() > (SLinks + 10)){
                    SL = true;
                }
                if(afstandRechts() < (SRechts - 10) || afstandRechts() > (SRechts + 10)){
                    SR = true;
                }
                if(afstandVoor() < (SVoor - 10) || afstandVoor() > (SVoor + 10)){
                    SV = true;
                }
                //if(afstandAchter() < (SAchter - 10) || afstandAchter() > (SAchter + 10)){ SA = true; }
                if(SL == true && SR == true && SV == true && IR == true){
                    check = false;
                }
            }
            printf("\r\n fase 5");
            int tijd = intit.read_ms();//heel rondje?
            while(fmod(tijd, (128 * msec_turn_f)) > 10){
                tijd = intit.read_ms();
                wait_ms(10);
            }
            //stop
            intit.stop();
            LV = 0;
            RA = 0;
            wait_ms(1000);
            //rechtsaf 90 graden
            LV = 1;
            RA = 1;
            wait_ms(msec_turn * 32);
            LV = 0;
            RA = 0;
            Vooruit(LVMAX, LVMIN, RVMAX, RVMIN, VMAX, VMIN);
            wait_ms(50);
            //linksaf 90 graden
            LA = 1;
            RV = 1;
            wait_ms(msec_turn * 32);
            //stop
            LA = 0;
            RV = 0;
            initialize = 1;//einde initialisatie
        }
        if(IR_test2(LVMAX, LVMIN, RVMAX, RVMIN, VMAX, VMIN) == false){
            Achteruit();
            LA = 1;
            RV = 1;
            wait_ms(msec_turn * 32);
            LA = 0;
            RV = 0;
            /*float links = IR_LinksVoor.read();
            float voor = IR_Voor.read();
            float rechts = IR_RechtsVoor.read();
            float linksachter = IR_LinksAchter.read();
            float rechtsachter = IR_RechtsAchter.read();
            if((voor < VMIN || voor > VMAX) || (rechts < RVMIN || rechts > RVMAX) || (links > LVMAX || links < LVMIN) && ((linksachter < LAMIN || linksachter > LAMAX) && (rechtsachter < RAMIN || rechtsachter > RAMAX))){
                wait(20);
                while(IR_test2(LVMAX, LVMIN, RVMAX, RVMIN, VMAX, VMIN) == false){
                    LV = 0;
                    LA = 0;
                    RV = 0;
                    RA = 0;
                }
            }
            else if((rechts < RVMIN || rechts > RVMAX) && (links < LVMAX && links > LVMIN)){
                Achteruit();
                LA = 1;
                RV = 1;
                wait_ms(msec_turn * 32);
                LA = 0;
                RV = 0;
            }
            else if((voor < VMIN || voor > VMAX) && (linksachter > LAMIN && linksachter < LAMAX) && (rechtsachter > RAMIN && rechtsachter < RAMAX)){
                Achteruit();
                LA = 0;
                RA = 0;
                LV = 1;
                RA = 1;
                wait_ms(msec_turn * 16);
                //stop
                LV = 0;
                RA = 0;
            }
            else if((links > LVMAX || links < LVMIN) && (rechts < RVMAX && rechts > RVMIN)){
                Achteruit();
                LV = 1;
                RA = 1;
                wait_ms(msec_turn * 32);
                LV = 0;
                RA = 0;
            }
            else{
                Achteruit();
                LV = 1;
                RA = 1;
                wait_ms(msec_turn * 16);
                //stop
                LV = 0;
                RA = 0;
            }*/
        }
        else if(afstandLinks() <= 8 && afstandRechts() > 8){
            //links geen ruimte rechts wel
            Rechtsaf(msec_turn);
            turn = 0;
        }
        else if(afstandRechts() <= 8 && afstandLinks() > 8){
            //rechts geen ruimte links wel
            Linksaf(msec_turn);
            turn = 1;
        }
        else if(afstandLinks() <= 8 && afstandRechts() <= 8){
            //Achteruit();
            //180 graden draaien cw
            LV = 1;
            RA = 1;
            wait_ms(msec_turn * 16);
            //stop
            LV = 0;
            RA = 0;
        }
        else{
            if(turn == 0){
                //indien vorige keer rechtsaf nu linksaf
                Linksaf(msec_turn);
                turn = 1;
            }
            else{
                //indien vorige keer linksaf nu rechtsaf
                Rechtsaf(msec_turn);
                turn = 0;
            }

        }
        Vooruit(LVMAX, LVMIN, RVMAX, RVMIN, VMAX, VMIN);

    }
}
